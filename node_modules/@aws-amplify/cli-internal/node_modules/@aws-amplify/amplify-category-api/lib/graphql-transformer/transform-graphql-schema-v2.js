"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformGraphQLSchemaV2 = void 0;
const graphql_transformer_core_1 = require("@aws-amplify/graphql-transformer-core");
const amplify_cli_core_1 = require("amplify-cli-core");
const amplify_prompts_1 = require("amplify-prompts");
const fs_extra_1 = __importDefault(require("fs-extra"));
const graphql_transformer_common_1 = require("graphql-transformer-common");
const graphql_transformer_core_2 = require("graphql-transformer-core");
const lodash_1 = __importDefault(require("lodash"));
const path_1 = __importDefault(require("path"));
const amplify_cli_feature_flag_adapter_1 = require("./amplify-cli-feature-flag-adapter");
const auth_mode_compare_1 = require("./auth-mode-compare");
const user_defined_slots_1 = require("./user-defined-slots");
const utils_1 = require("./utils");
const transformer_options_v2_1 = require("./transformer-options-v2");
const PARAMETERS_FILENAME = 'parameters.json';
const SCHEMA_FILENAME = 'schema.graphql';
const SCHEMA_DIR_NAME = 'schema';
const PROVIDER_NAME = 'awscloudformation';
const transformGraphQLSchemaV2 = async (context, options) => {
    let resourceName;
    const backEndDir = amplify_cli_core_1.pathManager.getBackendDirPath();
    const flags = context.parameters.options;
    if (flags['no-gql-override']) {
        return undefined;
    }
    let { resourceDir, parameters } = options;
    const { forceCompile } = options;
    const { resourcesToBeCreated, resourcesToBeUpdated, allResources } = await context.amplify.getResourceStatus(amplify_cli_core_1.AmplifyCategories.API);
    let resources = resourcesToBeCreated.concat(resourcesToBeUpdated);
    const resourceNeedCompile = allResources
        .filter(r => !resources.includes(r))
        .filter(r => {
        const buildDir = path_1.default.normalize(path_1.default.join(backEndDir, amplify_cli_core_1.AmplifyCategories.API, r.resourceName, 'build'));
        return !fs_extra_1.default.existsSync(buildDir);
    });
    resources = resources.concat(resourceNeedCompile);
    if (forceCompile) {
        resources = resources.concat(allResources);
    }
    resources = resources.filter(resource => resource.service === 'AppSync');
    if (!resourceDir) {
        if (resources.length > 0) {
            const resource = resources[0];
            if (resource.providerPlugin !== PROVIDER_NAME) {
                return undefined;
            }
            const { category } = resource;
            ({ resourceName } = resource);
            resourceDir = path_1.default.normalize(path_1.default.join(backEndDir, category, resourceName));
        }
        else {
            return undefined;
        }
    }
    const previouslyDeployedBackendDir = options.cloudBackendDirectory;
    if (!previouslyDeployedBackendDir) {
        if (resources.length > 0) {
            const resource = resources[0];
            if (resource.providerPlugin !== PROVIDER_NAME) {
                return undefined;
            }
        }
    }
    const parametersFilePath = path_1.default.join(resourceDir, PARAMETERS_FILENAME);
    if (!parameters && fs_extra_1.default.existsSync(parametersFilePath)) {
        try {
            parameters = amplify_cli_core_1.JSONUtilities.readJson(parametersFilePath);
            if (parameters[graphql_transformer_common_1.ResourceConstants.PARAMETERS.OpenSearchInstanceType]) {
                parameters[graphql_transformer_common_1.ResourceConstants.PARAMETERS.OpenSearchInstanceType] = parameters[graphql_transformer_common_1.ResourceConstants.PARAMETERS.OpenSearchInstanceType]
                    .replace('.search', '.elasticsearch');
            }
        }
        catch (e) {
            parameters = {};
        }
    }
    let { authConfig } = options;
    if (lodash_1.default.isEmpty(authConfig) && !lodash_1.default.isEmpty(resources)) {
        authConfig = await context.amplify.invokePluginMethod(context, amplify_cli_core_1.AmplifyCategories.API, amplify_cli_core_1.AmplifySupportedService.APPSYNC, 'getAuthConfig', [context, resources[0].resourceName]);
        if (lodash_1.default.isEmpty(authConfig)) {
            if (resources[0].output.securityType) {
                authConfig = {
                    defaultAuthentication: {
                        authenticationType: resources[0].output.securityType,
                    },
                    additionalAuthenticationProviders: [],
                };
            }
            else {
                ({ authConfig } = resources[0].output);
            }
        }
    }
    const buildDir = path_1.default.normalize(path_1.default.join(resourceDir, 'build'));
    const schemaFilePath = path_1.default.normalize(path_1.default.join(resourceDir, SCHEMA_FILENAME));
    const schemaDirPath = path_1.default.normalize(path_1.default.join(resourceDir, SCHEMA_DIR_NAME));
    if (!options.dryRun) {
        fs_extra_1.default.ensureDirSync(buildDir);
    }
    const buildConfig = await (0, transformer_options_v2_1.generateTransformerOptions)(context, options);
    if (!buildConfig) {
        return undefined;
    }
    const transformerOutput = await buildAPIProject(context, buildConfig);
    amplify_prompts_1.printer.success(`GraphQL schema compiled successfully.\n\nEdit your schema at ${schemaFilePath} or \
place .graphql files in a directory at ${schemaDirPath}`);
    if ((0, auth_mode_compare_1.isAuthModeUpdated)(options)) {
        parameters.AuthModeLastUpdated = new Date();
    }
    if (!options.dryRun) {
        amplify_cli_core_1.JSONUtilities.writeJson(parametersFilePath, parameters);
    }
    return transformerOutput;
};
exports.transformGraphQLSchemaV2 = transformGraphQLSchemaV2;
const buildAPIProject = async (context, opts) => {
    const schema = opts.projectConfig.schema.toString();
    if (!schema) {
        return undefined;
    }
    const builtProject = await _buildProject(opts);
    const buildLocation = path_1.default.join(opts.projectDirectory, 'build');
    const currentCloudLocation = opts.currentCloudBackendDirectory ? path_1.default.join(opts.currentCloudBackendDirectory, 'build') : undefined;
    if (opts.projectDirectory && !opts.dryRun) {
        await (0, utils_1.writeDeploymentToDisk)(context, builtProject, buildLocation, opts.rootStackFileName, opts.buildParameters);
        await (0, graphql_transformer_core_2.sanityCheckProject)(currentCloudLocation, buildLocation, opts.rootStackFileName, opts.sanityCheckRules.diffRules, opts.sanityCheckRules.projectRules);
    }
    return builtProject;
};
const _buildProject = async (opts) => {
    const userProjectConfig = opts.projectConfig;
    const stackMapping = userProjectConfig.config.StackMapping;
    const userDefinedSlots = {
        ...(0, user_defined_slots_1.parseUserDefinedSlots)(userProjectConfig.pipelineFunctions),
        ...(0, user_defined_slots_1.parseUserDefinedSlots)(userProjectConfig.resolvers),
    };
    const transformers = await opts.transformersFactory(opts.transformersFactoryArgs);
    const transform = new graphql_transformer_core_1.GraphQLTransform({
        transformers,
        stackMapping,
        transformConfig: userProjectConfig.config,
        authConfig: opts.authConfig,
        buildParameters: opts.buildParameters,
        stacks: opts.projectConfig.stacks || {},
        featureFlags: new amplify_cli_feature_flag_adapter_1.AmplifyCLIFeatureFlagAdapter(),
        sandboxModeEnabled: opts.sandboxModeEnabled,
        userDefinedSlots,
        resolverConfig: opts.resolverConfig,
        overrideConfig: opts.overrideConfig,
    });
    const schema = userProjectConfig.schema.toString();
    const transformOutput = transform.transform(schema);
    return (0, utils_1.mergeUserConfigWithTransformOutput)(userProjectConfig, transformOutput, opts);
};
//# sourceMappingURL=transform-graphql-schema-v2.js.map