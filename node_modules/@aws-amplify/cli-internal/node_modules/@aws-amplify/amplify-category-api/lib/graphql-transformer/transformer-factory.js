"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.constructGraphQLTransformV2 = exports.getTransformerFactory = void 0;
const graphql_auth_transformer_1 = require("@aws-amplify/graphql-auth-transformer");
const graphql_default_value_transformer_1 = require("@aws-amplify/graphql-default-value-transformer");
const graphql_function_transformer_1 = require("@aws-amplify/graphql-function-transformer");
const graphql_http_transformer_1 = require("@aws-amplify/graphql-http-transformer");
const graphql_index_transformer_1 = require("@aws-amplify/graphql-index-transformer");
const graphql_maps_to_transformer_1 = require("@aws-amplify/graphql-maps-to-transformer");
const graphql_model_transformer_1 = require("@aws-amplify/graphql-model-transformer");
const graphql_predictions_transformer_1 = require("@aws-amplify/graphql-predictions-transformer");
const graphql_relational_transformer_1 = require("@aws-amplify/graphql-relational-transformer");
const graphql_searchable_transformer_1 = require("@aws-amplify/graphql-searchable-transformer");
const graphql_dynamodb_transformer_1 = require("graphql-dynamodb-transformer");
const graphql_auth_transformer_2 = require("graphql-auth-transformer");
const graphql_connection_transformer_1 = require("graphql-connection-transformer");
const graphql_elasticsearch_transformer_1 = require("graphql-elasticsearch-transformer");
const graphql_versioned_transformer_1 = require("graphql-versioned-transformer");
const graphql_function_transformer_2 = require("graphql-function-transformer");
const graphql_http_transformer_2 = require("graphql-http-transformer");
const graphql_predictions_transformer_2 = require("graphql-predictions-transformer");
const graphql_key_transformer_1 = require("graphql-key-transformer");
const amplify_cli_core_1 = require("amplify-cli-core");
const amplify_prompts_1 = require("amplify-prompts");
const graphql_transformer_core_1 = require("graphql-transformer-core");
const import_from_1 = __importDefault(require("import-from"));
const import_global_1 = __importDefault(require("import-global"));
const path_1 = __importDefault(require("path"));
const graphql_transformer_core_2 = require("@aws-amplify/graphql-transformer-core");
const user_defined_slots_1 = require("./user-defined-slots");
const amplify_cli_feature_flag_adapter_1 = require("./amplify-cli-feature-flag-adapter");
const PROVIDER_NAME = 'awscloudformation';
const getTransformerFactory = async (context, resourceDir, authConfig) => {
    const transformerVersion = await amplify_cli_core_1.ApiCategoryFacade.getTransformerVersion(context);
    return transformerVersion === 2
        ? getTransformerFactoryV2(resourceDir)
        : getTransformerFactoryV1(context, resourceDir, authConfig);
};
exports.getTransformerFactory = getTransformerFactory;
const getTransformerFactoryV2 = (resourceDir) => async (options) => {
    var _a, _b;
    const modelTransformer = new graphql_model_transformer_1.ModelTransformer();
    const indexTransformer = new graphql_index_transformer_1.IndexTransformer();
    const hasOneTransformer = new graphql_relational_transformer_1.HasOneTransformer();
    const authTransformer = new graphql_auth_transformer_1.AuthTransformer({
        adminRoles: (_a = options.adminRoles) !== null && _a !== void 0 ? _a : [],
        identityPoolId: options.identityPoolId,
    });
    const transformerList = [
        modelTransformer,
        new graphql_function_transformer_1.FunctionTransformer(),
        new graphql_http_transformer_1.HttpTransformer(),
        new graphql_predictions_transformer_1.PredictionsTransformer(options === null || options === void 0 ? void 0 : options.storageConfig),
        new graphql_index_transformer_1.PrimaryKeyTransformer(),
        indexTransformer,
        new graphql_relational_transformer_1.HasManyTransformer(),
        hasOneTransformer,
        new graphql_relational_transformer_1.ManyToManyTransformer(modelTransformer, indexTransformer, hasOneTransformer, authTransformer),
        new graphql_relational_transformer_1.BelongsToTransformer(),
        new graphql_default_value_transformer_1.DefaultValueTransformer(),
        authTransformer,
        new graphql_maps_to_transformer_1.MapsToTransformer(),
    ];
    if (options === null || options === void 0 ? void 0 : options.addSearchableTransformer) {
        const resourceDirParts = resourceDir.split(path_1.default.sep);
        const apiName = resourceDirParts[resourceDirParts.length - 1];
        transformerList.push(new graphql_searchable_transformer_1.SearchableModelTransformer(apiName));
    }
    const customTransformersConfig = await (0, graphql_transformer_core_1.loadProject)(resourceDir);
    const customTransformerList = (_b = customTransformersConfig === null || customTransformersConfig === void 0 ? void 0 : customTransformersConfig.config) === null || _b === void 0 ? void 0 : _b.transformers;
    const customTransformers = (Array.isArray(customTransformerList) ? customTransformerList : [])
        .map(importTransformerModule)
        .map(imported => {
        const CustomTransformer = imported.default;
        if (typeof CustomTransformer === 'function') {
            return new CustomTransformer();
        }
        if (typeof CustomTransformer === 'object') {
            throw new Error("Custom Transformers' should implement TransformerProvider interface");
        }
        throw new Error("Custom Transformers' default export must be a function or an object");
    })
        .filter(customTransformer => customTransformer);
    if (customTransformers.length > 0) {
        transformerList.push(...customTransformers);
    }
    return transformerList;
};
function getTransformerFactoryV1(context, resourceDir, authConfig) {
    return async (addSearchableTransformer, storageConfig) => {
        var _a, _b;
        const transformerList = [
            new graphql_dynamodb_transformer_1.DynamoDBModelTransformer(),
            new graphql_versioned_transformer_1.VersionedModelTransformer(),
            new graphql_function_transformer_2.FunctionTransformer(),
            new graphql_http_transformer_2.HttpTransformer(),
            new graphql_key_transformer_1.KeyTransformer(),
            new graphql_connection_transformer_1.ModelConnectionTransformer(),
            new graphql_predictions_transformer_2.PredictionsTransformer(storageConfig),
        ];
        if (addSearchableTransformer) {
            transformerList.push(new graphql_elasticsearch_transformer_1.SearchableModelTransformer());
        }
        const customTransformersConfig = await (0, graphql_transformer_core_1.readTransformerConfiguration)(resourceDir);
        const customTransformers = (customTransformersConfig && customTransformersConfig.transformers ? customTransformersConfig.transformers : [])
            .map(importTransformerModule)
            .map(imported => {
            const CustomTransformer = imported.default;
            if (typeof CustomTransformer === 'function') {
                return new CustomTransformer();
            }
            else if (typeof CustomTransformer === 'object') {
                return CustomTransformer;
            }
            throw new Error("Custom Transformers' default export must be a function or an object");
        })
            .filter(customTransformer => customTransformer);
        if (customTransformers.length > 0) {
            transformerList.push(...customTransformers);
        }
        let amplifyAdminEnabled = false;
        try {
            const amplifyMeta = amplify_cli_core_1.stateManager.getMeta();
            const appId = (_b = (_a = amplifyMeta === null || amplifyMeta === void 0 ? void 0 : amplifyMeta.providers) === null || _a === void 0 ? void 0 : _a[PROVIDER_NAME]) === null || _b === void 0 ? void 0 : _b.AmplifyAppId;
            const res = await amplify_cli_core_1.CloudformationProviderFacade.isAmplifyAdminApp(context, appId);
            amplifyAdminEnabled = res.isAdminApp;
        }
        catch (err) {
        }
        transformerList.push(new graphql_auth_transformer_2.ModelAuthTransformer({ authConfig, addAwsIamAuthInOutputSchema: amplifyAdminEnabled }));
        return transformerList;
    };
}
const importTransformerModule = (transformerName) => {
    const fileUrlMatch = /^file:\/\/(.*)\s*$/m.exec(transformerName);
    const modulePath = fileUrlMatch ? fileUrlMatch[1] : transformerName;
    if (!modulePath) {
        throw new Error(`Invalid value specified for transformer: '${transformerName}'`);
    }
    let importedModule;
    const tempModulePath = modulePath.toString();
    try {
        if (path_1.default.isAbsolute(tempModulePath)) {
            importedModule = require(modulePath);
        }
        else {
            const projectRootPath = amplify_cli_core_1.pathManager.findProjectRoot();
            const projectNodeModules = path_1.default.join(projectRootPath, 'node_modules');
            try {
                importedModule = (0, import_from_1.default)(projectNodeModules, modulePath);
            }
            catch (_a) {
            }
            if (!importedModule) {
                importedModule = (0, import_global_1.default)(modulePath);
            }
        }
        return importedModule;
    }
    catch (error) {
        amplify_prompts_1.printer.error(`Unable to import custom transformer module(${modulePath}).`);
        amplify_prompts_1.printer.error(`You may fix this error by editing transformers at ${path_1.default.join(transformerName, graphql_transformer_core_1.TRANSFORM_CONFIG_FILE_NAME)}`);
        throw error;
    }
};
const constructGraphQLTransformV2 = async (opts) => {
    const userProjectConfig = opts.projectConfig;
    const stackMapping = userProjectConfig.config.StackMapping;
    const userDefinedSlots = {
        ...(0, user_defined_slots_1.parseUserDefinedSlots)(userProjectConfig.pipelineFunctions),
        ...(0, user_defined_slots_1.parseUserDefinedSlots)(userProjectConfig.resolvers),
    };
    const transformers = await opts.transformersFactory(opts.transformersFactoryArgs);
    const transform = new graphql_transformer_core_2.GraphQLTransform({
        transformers,
        stackMapping,
        transformConfig: userProjectConfig.config,
        authConfig: opts.authConfig,
        buildParameters: opts.buildParameters,
        stacks: opts.projectConfig.stacks || {},
        featureFlags: new amplify_cli_feature_flag_adapter_1.AmplifyCLIFeatureFlagAdapter(),
        sandboxModeEnabled: opts.sandboxModeEnabled,
        userDefinedSlots,
        resolverConfig: opts.resolverConfig,
        overrideConfig: opts.overrideConfig,
    });
    return transform;
};
exports.constructGraphQLTransformV2 = constructGraphQLTransformV2;
//# sourceMappingURL=transformer-factory.js.map